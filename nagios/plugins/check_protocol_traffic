#!/usr/bin/env python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;

import dbus
from time import time
from optparse import OptionParser
from ConfigParser import ConfigParser

parser = OptionParser()

parser.add_option( "-d", "--dbus",
    help="DBus service to connect to.",
    default="org.openattic.systemd"
    )

parser.add_option( "-s", "--service",
    help="The service to query.",
    )

parser.add_option( "-i", "--interface",
    help="The interface to query.", default=''
    )

options, progargs = parser.parse_args()

savedstate = ConfigParser()
havestate  = bool( savedstate.read("/var/lib/nagios3/protocol_traffic.%s.%s" % (options.interface, options.service)) )

stats = dbus.SystemBus().get_object(options.dbus, "/nagios").iptables_get_stats()

def dbus_type_to_python(obj):
    """ Convert a single dbus something to its python equivalent. """
    conv = {
        dbus.Array: list,
        dbus.Dictionary: dict,
        dbus.Boolean: bool,
        dbus.Int16: int,
        dbus.Int32: int,
        dbus.Int64: int,
        dbus.String: unicode,
        dbus.Struct: tuple,
        tuple: tuple
        }
    return conv[type(obj)](obj)

def dbus_to_python(obj):
    """ Recursively convert a dbus something to its python equivalent,
        recursing over lists and dicts.
    """
    py = dbus_type_to_python(obj)
    if isinstance(py, list):
        return [dbus_to_python(el) for el in py]
    elif isinstance(py, tuple):
        return tuple([dbus_to_python(el) for el in py])
    elif isinstance(py, dict):
        return dict([(dbus_type_to_python(key), dbus_to_python(obj[key])) for key in py])
    return py


tag = ["OPENATTIC"]

if options.interface:
    tag.append(options.interface)

if options.service:
    tag.append(options.service)

tag_in  = ':'.join(tag + ["IN"] ).upper()
tag_out = ':'.join(tag + ["OUT"]).upper()

stats = dict([
    (derp["comment"], derp) for derp in dbus_to_python(stats) if derp["comment"] in (tag_in, tag_out)
    ])



if havestate:
    dt   = time() - savedstate.getfloat("state", "timestamp")
    din  = (float(stats[tag_in]["bytes"])  - savedstate.getfloat("in",  "bytes"))
    dout = (float(stats[tag_out]["bytes"]) - savedstate.getfloat("out", "bytes"))
    print "Traffic for %s on %s|in=%sBytes/s out=%sBytes/s" % ( options.service, options.interface, din/dt, dout/dt )

else:
    print "Need state info, please wait until Nagios checks again."
    savedstate.add_section("state")
    savedstate.add_section("in")
    savedstate.add_section("out")

savedstate.set("state", "timestamp", time())

for key in stats[tag_in]:
    savedstate.set("in", key, stats[tag_in][key])

for key in stats[tag_out]:
    savedstate.set("out", key, stats[tag_out][key])

savedstate.write( open( "/var/lib/nagios3/protocol_traffic.%s.%s" % (options.interface, options.service), "wb" ) )
