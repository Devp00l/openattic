#!/usr/bin/env python
# -*- coding: utf-8 -*-
import dbus
import sys
from time import time
from optparse import OptionParser
from ConfigParser import ConfigParser

exit = 0
parser = OptionParser()


parser.add_option( "-d", "--dbus",
    help="DBus service to connect to.",
    default="org.openattic.systemd"
    )

parser.add_option( "-w", "--warning", type="float",
    help="snapshot is at 50 %.", default=50
    )
parser.add_option("-c", "--critical", type="float",
    help= "snapshot is at 70%", default=70
    )

options, progargs = parser.parse_args()

if len(progargs) != 1:
  print("Usage: check_openattic_snapshot <lv name>")
  sys.exit(2)

stats = dbus.SystemBus().get_object(options.dbus, "/lvm").lvs()



def dbus_type_to_python(obj):
    """ Convert a single dbus something to its python equivalent. """
    conv = {
        dbus.Array: list,
        dbus.Dictionary: dict,
        dbus.Boolean: bool,
        dbus.Int16: int,
        dbus.Int32: int,
        dbus.Int64: int,
        dbus.String: unicode,
        dbus.Struct: tuple,
        tuple: tuple
        }
    return conv[type(obj)](obj)

def dbus_to_python(obj):
    """ Recursively convert a dbus something to its python equivalent,
        recursing over lists and dicts.
    """
    py = dbus_type_to_python(obj)
    if isinstance(py, list):
        return [dbus_to_python(el) for el in py]
    elif isinstance(py, tuple):
        return tuple([dbus_to_python(el) for el in py])
    elif isinstance(py, dict):
        return dict([(dbus_type_to_python(key), dbus_to_python(obj[key])) for key in py])
    return py

lvname = progargs[0]
lv_percent = float(stats[lvname]["LVM2_SNAP_PERCENT"])

normal = ("snapshot %s is at %.2f%% "%(lvname,lv_percent)+"|"
" util_percent=%.2f%%;%.f;%.f "%(lv_percent,options.warning,options.critical))

if stats[lvname]["LVM2_ORIGIN"] == "":
  print("Sie haben ein Originalvolume ausgewählt!")
  sys.exit(2)




#wenn snap_percent größer als 50% dann 'warning' zurückgegeben
lv_origin = stats[lvname]["LVM2_ORIGIN"]
print(normal)

# wenn original_lvsize kleiner als snapshot dann exitcode 2 
if float(stats[lvname]["LVM2_LV_SIZE"]) < float(stats[lv_origin]["LVM2_LV_SIZE"]):
  if lv_percent > options.warning:
    exit = 1
   


# wenn snap_percent größer als 70%, dann soll 'critical' zurückgegeben werden
  if lv_percent > options.critical:
    exit = 0

# wenn snapshot genauso groß wie original_lv UND lv_percent größer ist als 75% dann exitcode 1
if float(stats[lvname]["LVM2_LV_SIZE"]) == float(stats[lv_origin]["LVM2_LV_SIZE"]) and lv_percent >= 75:
    exit = 1

#wenn snapshot genauso groß wie orig UND lv_percent größer ist als 95%, dann exitcode 2
if float(stats[lvname]["LVM2_LV_SIZE"]) == float(stats[lv_origin]["LVM2_LV_SIZE"]) and lv_percent >= 95:
    exit = 2


#wenn snapshot genauso groß wie original, dann exitcode 'ok' (alles andere durch oberen if's abgefangen(?)
if float(stats[lvname]["LVM2_LV_SIZE"]) == float(stats[lv_origin]["LVM2_LV_SIZE"]):
   exit = 0


sys.exit(exit)