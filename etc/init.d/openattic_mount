#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;
#
#  Copyright (C) 2011-2012, it-novum GmbH <community@open-attic.org>
#
#  openATTIC is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
### BEGIN INIT INFO
# Provides: openattic_mounts
# Required-Start: $local_fs $network $remote_fs openattic_LogicalVolume
# Required-Stop: $local_fs $network $remote_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Mount openATTIC's volumes
# Description: Mounts and unmounts volumes for clustering
### END INIT INFO

import sys
import os

if len(sys.argv) not in (2, 3):
    print ( "%s <command> [<vg>]\n"
            "\n"
            "Valid commands:\n"
            " * start:   Mount all volumes\n"
            " * stop:    Unmount all volumes\n"
            " * status:  See if any volumes are currently mounted\n"
            " * restart: Umount, then mount all volumes\n" ) % sys.argv[0]
    sys.exit(1)


basedir = dict([
    line.strip().split("=") for line in open("/etc/default/openattic", "rb") if line.strip()
    ])["OADIR"].replace('"', '')

sys.path.append( basedir )
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from lvm.models import LogicalVolume

if len(sys.argv) == 2:
    command = sys.argv[1]
    vg = None
else:
    command, vg = sys.argv[1:]

def do_mount():
    if vg is None:
        print "Mounting all volumes..."
        LogicalVolume.mount_all()
    else:
        print "Mounting volumes of volume group '%s'..." % vg
        for lv in LogicalVolume.objects.filter(vg__name=vg).exclude(filesystem=""):
            lv.mount()

def do_unmount():
    if vg is None:
        print "Unmounting all volumes..."
        LogicalVolume.unmount_all()
    else:
        print "Unmounting volumes of volume group '%s'..." % vg
        for lv in LogicalVolume.objects.filter(vg__name=vg).exclude(filesystem=""):
            lv.unmount()

if command == "start":
    do_mount()

elif command == "stop":
    do_unmount()

elif command in ("restart", "force-reload"):
    do_mount()
    do_unmount()

elif command == "status":
    try:
        vols = LogicalVolume.objects.exclude(filesystem="")
        if vg is not None:
            vols = vols.filter(vg__name=vg)
        volcount = vols.count()
        mountedcount = len([True for lv in vols if lv.mounted])
    except Exception, err:
        print "Got exception '%s' when checking, assuming the database isn't running and nothing is mounted." % err.message
        sys.exit(3)
    else:
        if mountedcount:
            print "There are currently %d mounted volumes (%d total)." % (mountedcount, volcount)
            sys.exit(0)
        elif volcount:
            print "There are currently no mounted volumes (%d total)." % volcount
            sys.exit(3)
        else:
            print "There are currently no volumes at all."
            sys.exit(0)

elif command == "probe":
    print "restart"

else:
    print "Unknown command %s." % command
    sys.exit(1)
