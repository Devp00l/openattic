#!/usr/bin/env python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;

"""
 *  Copyright (C) 2011-2016, it-novum GmbH <community@openattic.org>
 *
 *  openATTIC is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; version 2.
 *
 *  This package is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
"""

import os
import sys
import django
import json
import time

from optparse import OptionParser
from configobj import ConfigObj


distro_config = ["/etc/default/openattic", "/etc/sysconfig/openattic"]
for config_file in distro_config:
    if os.path.isfile(config_file):
        config = ConfigObj(config_file)
        sys.path.append(config["OADIR"])
        break
else:
    raise IOError("Can't find the needed configuration file 'openattic' containing the OADIR "
                  "setting. Please reinstall the openattic-base package to get the missing "
                  "configuration file.")

os.environ["DJANGO_SETTINGS_MODULE"] = "settings"

if django.VERSION[:2] >= (1, 7):
    django.setup()


def main():
    from ceph.tasks import get_rbd_performance_data
    from taskqueue.models import TaskQueue

    parser = OptionParser(usage="%prog <cluster FSID> <pool name> <image name>")
    _, args = parser.parse_args()

    if len(args) != 3:
        parser.print_usage()
        sys.exit(3)

    if len(TaskQueue.filter_by_definition_and_status(get_rbd_performance_data(
            args[0], args[1], args[2]), [TaskQueue.STATUS_NOT_STARTED, TaskQueue.STATUS_RUNNING])) \
            == 0:
        get_rbd_performance_data.delay(args[0], args[1], args[2])

    finished_tasks = TaskQueue.filter_by_definition_and_status(get_rbd_performance_data(
        args[0], args[1], args[2]), [TaskQueue.STATUS_FINISHED])
    finished_tasks = list(finished_tasks)

    if len(finished_tasks) > 0:
        latest_task = finished_tasks.pop()

        for task in finished_tasks:
            task.delete()

        if json.loads(latest_task.result) == "CIRITICAL":
            sys.exit(2)

        last_modified = int(time.mktime(latest_task.last_modified.timetuple())*1000)
        print "{} last_modified={}".format(json.loads(latest_task.result), last_modified)
        sys.exit(0)
    else:
        print "UNKNOWN"
        sys.exit(3)

if __name__ == "__main__":
    main()
