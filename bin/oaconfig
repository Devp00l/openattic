#!/bin/bash
#
#  Copyright (C) 2011-2014, it-novum GmbH <community@open-attic.org>
#
#  openATTIC is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.


export OACONFIG="True"

. /etc/default/openattic

cd $OADIR
OAUSER=` cut -d: -f1 <<< "$RPCD_CHUID"`

if [ "$DJANGO_AUTO_COMPLETE" = "1" ]; then
	MYCOMMANDS="install scan-vgs add-vg add-disk restart reload status dbdump"
	ARRAY_WORDS=( $COMP_WORDS )
	compgen -W "$MYCOMMANDS" "${ARRAY_WORDS[COMP_CWORD]}"
	su "$OAUSER" -c 'python manage.py'
	exit $?
fi

set -e
set -u

create_indexpage () {
<<EOF cat >/var/www/html/index.html
<html>
  <head>
    <meta http-equiv="refresh" content="1;url=/openattic" ></meta>
  </head>
  <body>
    Redirecting...
  </body>
</html>
EOF
}

usage () {
	echo "Usage: $0 <command> [<args>]"
	echo
	echo "Wrapper around the openATTIC management system."
	echo
	echo "Valid commands are:"
	echo
	echo "    install      Run this command after you installed new openATTIC modules."
	echo "                 Any arguments to this command will be passed to apt-get install."
	echo "    scan-vgs     Instruct LVM to search for existing VGs."
	echo "    add-vg       Make an already existing LVM Volume Group known to openATTIC."
	echo "    add-disk     Create a PV on the given disk/partition and add it to openATTIC."
	echo "    restart      Restart all services that are needed to run openATTIC."
	echo "    reload       Reload all services that are needed to run openATTIC."
	echo "    status       Show the status of all services that are needed to run openATTIC."
	echo "    dbdump       Create a database dump on stdout."
	echo
	echo "Any other command will be passed as-is to the openATTIC management system,"
	echo "which supports the commands and options listed below."
	echo
	
	su "$OAUSER" -c 'python manage.py help'
	exit 1
}

if [ "$#" = "0" ]; then
	usage
fi

case $1 in
	help)
		usage
		;;

	install)
		su "$OAUSER" -c 'python manage.py pre_install'
		
		chown $RPCD_CHUID /etc/openattic/databases/*sql.ini
		
		if [ "$#" -gt 1 ]; then
			shift
			apt-get install $@
		fi
		
		if service openattic-systemd status >/dev/null; then
			# restart the daemons so they don't keep any locks open
			$0 reload
		fi
		
		# Initialize the schema so our daemons can start
		su "$OAUSER" -c 'python manage.py syncdb --noinput'
		
		# Create the status_cache table, ignoring failures (those mean we did this before)
		su "$OAUSER" -c 'python manage.py createcachetable status_cache >/dev/null 2>/dev/null' || /bin/true
		
		su "$OAUSER" -c 'python manage.py add-host'
		
		# (re)start the daemons
		$0 reload
		
		su "$OAUSER" -c 'python manage.py makedefaultadmin'
		
		# Run the hook scripts to initialize modules
		shopt -s nullglob
		for hook in $OADIR/*/bin/oaconfig-install.sh; do
			source $hook
		done
		
		INDEXHTML="`md5sum /var/www/html/index.html | cut -d' ' -f1`"
		if [ "$INDEXHTML" = '74cec59a19e5d16f7cc6a2445e35fa3b' ] || [ "$INDEXHTML" = 'c32ad802df5abca941d784abf642e7fd' ]; then
			create_indexpage
		fi
		
		su "$OAUSER" -c 'python manage.py post_install'
		
		python manage.py install-cli
		echo "Completed successfully."
		;;
	
	scan-vg|scan-vgs)
		vgscan --mknodes
		vgchange -ay
		;;

	add-vg)
		if [ "$#" != "2" ]; then
			echo "Usage: $0 $1 <vgname>" >&2
			exit 1
		fi
		if [ ! -f "/etc/openattic/cli.conf" ]; then
			echo "This command requires oacli to be configured (run $0 install-cli)."
			exit 1
		fi
		HOSTID=`oacli 'ifconfig.Host.current' | grep '^id' | cut -d\' -f2`
		eval `LANG=C vgs --units M -o vg_size,vg_uuid --noheadings --nameprefixes --nosuffix "$2"`
		ROUNDEDMEGS=`awk '{printf "%.0f\n", $1}' <<< $LVM2_VG_SIZE`
		STOROBJID=`oacli volumes.StorageObject.create 'json:{"name": "'$2'", "megs": "'$ROUNDEDMEGS'", "uuid": "'$LVM2_VG_UUID'", "is_origin": true }' | grep '^id' | cut -d\' -f2`
		oacli lvm.VolumeGroup.create 'json:{"storageobj": {"app": "volumes", "obj": "StorageObject", "id": '$STOROBJID'}, "host": {"app":"ifconfig", "obj":"Host", "id":'$HOSTID'} }'
		;;

	add-disk)
		if [ "$#" != "3" ]; then
			echo "Usage: $0 $1 <disk> <vgname>" >&2
			exit 1
		fi
		if [ ! -f "/etc/openattic/cli.conf" ]; then
			echo "This command requires oacli to be configured (run $0 install-cli)."
			exit 1
		fi
		DISK=$2
		VG=$3
		pvcreate $DISK
		VGINFO=$( oacli lvm.VolumeGroup.filter "json:{\"storageobj__name\": \"$VG\"}" )
		if [ -z "$VGINFO" ]; then
			vgcreate $VG $DISK
			$0 add-vg $VG
		else
			vgextend $VG $DISK
		fi
		;;

	reload)
		service openattic-systemd restart
		service openattic-rpcd restart
		service "${WEBSERVER_SERVICE}" reload
		;;

	start|stop|restart|force-reload)
		service openattic-systemd $1
		service openattic-rpcd $1
		service "${WEBSERVER_SERVICE}" $1
		;;

	status)
		service openattic-systemd status || /bin/true
		service openattic-rpcd status    || /bin/true
		service "${WEBSERVER_SERVICE}" status || /bin/true
		;;

	rootshell|shell)
		python manage.py shell
		;;

	domainjoin)
		if grep -qP '^\d+$' <<<"$HOSTNAME" ; then
			echo "Your hostname is invalid because it consists of numbers only. (Consider adding a - somewhere.)"
			exit 2
		fi
		
		if grep -qP '^[\w\d\-]{16,}$' <<<"$HOSTNAME" ; then
			echo "Your hostname is too long (must be max. 15 characters)."
			exit 2
		fi
		
		if [ ! -e "$OADIR"/installed_apps.d/*samba ]; then
			echo "The Samba module must be enabled for this to work."
			exit 2
		fi
		
		if [ ! -f "/etc/openattic/cli.conf" ]; then
			echo "This command requires oacli to be configured (run $0 install-cli)."
			exit 2
		fi
		
		if ! which smbd > /dev/null; then
			echo "smbd not found."
			exit 2
		fi
		
		if ! which nmbd > /dev/null; then
			echo "nmbd not found."
			exit 2
		fi
		
		if ! which winbindd > /dev/null; then
			echo "winbindd not found."
			exit 2
		fi
		
		function lower () {
			sed 's/./\l&/g' <<<$1
		}
		function upper () {
			sed 's/./\u&/g' <<<$1
		}
		
		hostname="`lower $HOSTNAME`"
		netbios="`upper $HOSTNAME`"
		machacc="$netbios\$"
		
		if [ "$#" -lt 3 ]; then
			echo "Usage: $0 domainjoin <user> <domain> [<workgroup>]"
			exit 2
		fi
		
		user="$2"
		domain="`lower $3`"
		realm="`upper $3`"
		
		if [ "$#" = 4 ]; then
			workgroup="`upper $4`"
		else
			workgroup="`upper $domain`"
		fi
		
		echo "User:            $user"
		echo "Domain:          $domain"
		echo "Realm:           $realm"
		echo "Workgroup:       $workgroup"
		echo "Machine Account: $machacc"
		
		if [ "`hostname --fqdn`" != "$hostname.$domain" ]; then
			echo "Your FQDN seems wrong. Make sure /etc/hosts and /etc/hostname are correct."
			echo "The command 'hostname --fqdn' must return '$hostname.$domain' to pass this test."
			exit 1
		fi
		
		echo "Updating krb5.conf..."
		<<EOF cat > /etc/krb5.conf
[libdefaults]
	default_realm = $realm
	default_keytab_name = /etc/krb5.keytab
	default_tkt_enctypes = rc4-hmac des-cbc-crc des-cbc-md5
	default_tgs_enctypes = rc4-hmac des-cbc-crc des-cbc-md5

[domain_realm]
	.$domain = $realm
	$domain = $realm
EOF
		
		echo "Probing Kerberos..."
		kinit "$user"
		
		echo "Configuring Samba..."
		dbus-send --system --print-reply --dest=org.openattic.systemd /samba org.openattic.systemd.writeconf "string:$realm" "string:$workgroup"
		
		if [ -e /etc/krb5.keytab ]; then
			echo "Removing old keytab..."
			rm /etc/krb5.keytab
		fi
		echo "Joining Domain..."
		net ads join -k
		net ads keytab -k create
		net ads keytab -k add HTTP
		net ads keytab -k add HTTPS
		
		chmod g+r /etc/krb5.keytab
		chgrp openattic /etc/krb5.keytab
		
		kdestroy
		
		echo "Logging in as $machacc (this may fail a couple of times)..."
		while ! kinit -k "$machacc"; do
			sleep 1
		done
		
		<<EOF cat > /etc/pam.d/openattic
account [default=bad success=ok user_unknown=ignore service_err=ignore system_err=ignore] pam_krb5.so ignore_root

auth            sufficient      pam_krb5.so ccache=/tmp/krb5cc_%u use_first_pass
auth            required        pam_deny.so

session         optional        pam_krb5.so ignore_root
EOF
		
		echo "Configuring openATTIC..."
		<<EOF cat > /etc/openattic/domain.ini
[domain]
realm = $realm
workgroup = $workgroup

[kerberos]
enabled = True

[pam]
enabled = True
EOF
		$0 reload
		
		echo "Configuring libnss..."
		sed -i -e 's/^passwd:.*$/passwd:         compat winbind/' /etc/nsswitch.conf
		sed -i -e 's/^group:.*$/group:          compat winbind/' /etc/nsswitch.conf
		
		echo "Restarting Samba and Winbind..."
		while ! oacli ping ; do
			sleep 1
		done
		dbus-send --system --print-reply --dest=org.openattic.systemd /samba org.openattic.systemd.writeconf "string:" "string:"
		for SERVICE in $SAMBA_SERVICES; do
			service $SERVICE restart
		done
		service "$WINBIND_SERVICE" restart
		
		echo "To see if it worked, let's try 'getent passwd \"$user\"':"
		getent passwd "$user"
		;;

	dbshell)
		if which sudo > /dev/null; then
			DBNAME="`grep '^name' /etc/openattic/database.ini  | cut -d= -f2`"
			sudo -u postgres -s `which psql` $DBNAME
		else
			echo "Please install sudo for this command to work."
		fi
		;;

	dbdump|dumpdb)
		if which sudo > /dev/null; then
			DBNAME="`grep name /etc/openattic/database.ini  | cut -d= -f2`"
			sudo -u postgres -s `which pg_dump` $DBNAME
		else
			echo "Please install sudo for this command to work."
		fi
		;;

	*)
		# Big thanks to DireFog and pcgod for the following line
		# First pass my "$@" in a whitespace-preserving way to su's subshell,
		# which then passes it on to manage.py.
		su "$OAUSER" -s /bin/sh -- -c 'python manage.py "$@"' dummy "$@"
		;;
esac
