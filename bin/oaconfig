#!/bin/bash
#
#  Copyright (C) 2011-2012, it-novum GmbH <community@open-attic.org>
#
#  openATTIC is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.


export OACONFIG="True"

. /etc/default/openattic

cd $OADIR
OAUSER=` cut -d: -f1 <<< "$RPCD_CHUID"`

if [ "$DJANGO_AUTO_COMPLETE" = "1" ]; then
	MYCOMMANDS="install install-cli scan-vgs add-vg add-disk restart reload status rootshell"
	ARRAY_WORDS=( $COMP_WORDS )
	compgen -W "$MYCOMMANDS" "${ARRAY_WORDS[COMP_CWORD]}"
	su "$OAUSER" -c 'python manage.py'
	exit $?
fi

set -e
set -u


usage () {
	echo "Usage: $0 <command> [<args>]"
	echo
	echo "Wrapper around the openATTIC management system."
	echo
	echo "Valid commands are:"
	echo
	echo "    install      Run this command after you installed new openATTIC modules."
	echo "                 Any arguments to this command will be passed to apt-get install."
	echo "    install-cli  Generate an API Key and a corresponding oacli configuration."
	echo "    scan-vgs     Instruct LVM to search for existing VGs."
	echo "    add-vg       Make an already existing LVM Volume Group known to openATTIC."
	echo "    add-disk     Create a PV on the given disk/partition and add it to openATTIC."
	echo "    restart      Restart all services that are needed to run openATTIC."
	echo "    reload       Reload all services that are needed to run openATTIC."
	echo "    status       Show the status of all services that are needed to run openATTIC."
	echo "    rootshell    Start a python shell as root."
	echo
	echo "Any other command will be passed as-is to the openATTIC management system,"
	echo "which supports the commands and options listed below."
	echo
	
	su "$OAUSER" -c 'python manage.py help'
	exit 1
}

if [ "$#" = "0" ]; then
	usage
fi

case $1 in
	help)
		usage
		;;

	install)
		chown $RPCD_CHUID /etc/openattic/databases/*sql.ini
		
		if [ "$#" -gt 1 ]; then
			shift
			apt-get install $@
		fi
		
		if ! /etc/init.d/openattic_systemd status > /dev/null ; then
			# Initialize the schema so our daemons can start
			su "$OAUSER" -c 'python manage.py syncdb --noinput'
		fi
		
		# Configure nsswitch.conf
		OADBENGINE=$(grep engine /etc/openattic/database.ini | cut -d= -f2)
		if [ $OADBENGINE = "django.db.backends.postgresql_psycopg2" ]; then
			if grep passwd: /etc/nsswitch.conf | grep -qv pgsql; then
				# nsswitch does not yet include pgsql
				echo "Configuring nsswitch.conf to include pgsql. The current version will be backuped as nsswitch.conf.bak."
				sed -i.bak -e 's/^\(passwd:.*\)$/\0 pgsql/' /etc/nsswitch.conf
			fi
		fi
		if [ $OADBENGINE = "django.db.backends.mysql" ]; then
			if grep passwd: /etc/nsswitch.conf | grep -qv mysql; then
				echo "Configuring nsswitch.conf to include mysql. The current version will be backuped as nsswitch.conf.bak."
				sed -i.bak -e 's/^\(passwd:.*\)$/\0 mysql/' /etc/nsswitch.conf
			fi
		fi
		
		# (re)start the daemons
		$0 reload
		
		# Run the hook scripts to initialize modules
		shopt -s nullglob
		for hook in $OADIR/*/bin/oaconfig-install.sh; do
			source $hook
		done
		
		# Run database initializations that need to query the user for data
		su "$OAUSER" -c 'python manage.py syncdb'
		
		# If necessary, create an admin user (--noinput suppressed that before)
		if [ $(python manage.py haveadmin) = no ]; then
			echo "You need to create an Administrator user in order to login to openATTIC now."
			su "$OAUSER" -c 'python manage.py createsuperuser'
		fi
		;;

	install-cli)
		if [ -f "/etc/openattic/cli.conf" ]; then
			echo "/etc/openattic/cli.conf already exists, quitting" >&2
			exit 1
		fi
		echo "Please enter the username of the system admin you created using $0 install."
		read USERNAME
		KEY=$( $0 mkapikey -u $USERNAME -d "oacli access")
		
		if [ ! -z "$RPCD_CERTFILE" -a ! -z "$RPCD_KEYFILE" ]; then
			PROTO="https"
		else
			PROTO="http"
		fi
		
		echo "[options]"                                    > /etc/openattic/cli.conf
		echo "connect = $PROTO://__:$KEY@localhost:31234/" >> /etc/openattic/cli.conf
		echo "uidcheck = True"                             >> /etc/openattic/cli.conf
		echo "Successfully created /etc/openattic/cli.conf, oacli should now be ready to go."
		;;

	scan-vg|scan-vgs)
		vgscan --mknodes
		vgchange -ay
		;;

	add-vg)
		if [ "$#" != "2" ]; then
			echo "Usage: $0 $1 <vgname>" >&2
			exit 1
		fi
		if [ ! -f "/etc/openattic/cli.conf" ]; then
			echo "This command requires oacli to be configured (run $0 install-cli)."
			exit 1
		fi
		oacli lvm.VolumeGroup.create "json:{\"name\": \"$2\"}"
		;;

	add-disk)
		if [ "$#" != "3" ]; then
			echo "Usage: $0 $1 <disk> <vgname>" >&2
			exit 1
		fi
		if [ ! -f "/etc/openattic/cli.conf" ]; then
			echo "This command requires oacli to be configured (run $0 install-cli)."
			exit 1
		fi
		DISK=$2
		VG=$3
		pvcreate $DISK
		VGINFO=$( oacli lvm.VolumeGroup.filter "json:{\"name\": \"$VG\"}" )
		if [ -z "$VGINFO" ]; then
			vgcreate $VG $DISK
			$0 add-vg $VG
		else
			vgextend $VG $DISK
		fi
		;;

	restart|force-reload)
		/etc/init.d/openattic_systemd restart
		/etc/init.d/openattic_rpcd restart
		/etc/init.d/apache2 restart
		;;

	reload)
		/etc/init.d/openattic_systemd restart
		/etc/init.d/openattic_rpcd restart
		/etc/init.d/apache2 reload
		;;

	status)
		/etc/init.d/openattic_systemd status || /bin/true
		/etc/init.d/openattic_rpcd status    || /bin/true
		/etc/init.d/apache2 status           || /bin/true
		;;

	rootshell)
		python manage.py shell
		;;

	*)
		# Big thanks to DireFog and pcgod for the following line
		# First pass my "$@" in a whitespace-preserving way to su's subshell,
		# which then passes it on to manage.py.
		su "$OAUSER" -s /bin/sh -- -c 'python manage.py "$@"' dummy "$@"
		;;
esac
