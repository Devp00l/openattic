#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;
#
#  Copyright (C) 2011-2012, it-novum GmbH <community@open-attic.org>
#
#  openATTIC is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

import sys
import os

from optparse import OptionParser

basedir = dict([
    line.strip().split("=") for line in open("/etc/default/openattic", "rb") if line.strip()
    ])["OADIR"].replace('"', '')

sys.path.append( basedir )
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.db.models import Q

from ifconfig.models import Host
from lvm.models import VolumeGroup, LogicalVolume

class CmdLibrary(type):
    """ Meta class that keeps a library of defined checks. """
    handlers = {}

    def __init__( cls, name, bases, attrs ):
        type.__init__( cls, name, bases, attrs )
        if cls.command_name is not None:
            CmdLibrary.handlers[cls.command_name.lower()] = cls


class BaseCommand(object):
    __metaclass__ = CmdLibrary

    command_name = None

    def populate_optparser(self, parser):
        pass

    def __call__(self, options, *args):
         raise NotImplemented()


class VgStartCommand(BaseCommand):
    """Mount all volumes. """

    command_name = "start"

    def __call__(self, options, vg=None):
        thishost = Host.objects.get_current()
        if vg is None:
            volgroups = VolumeGroup.all_objects.filter(Q(host__isnull=True)|Q(host=thishost))
        else:
            volgroup  = VolumeGroup.all_objects.get(name=vg)
            if volgroup.host is not None and volgroup.host.id != thishost.id:
                print >> sys.stderr, "Volume Group '%s' is active on host '%s', cannot activate it here." % (
                    volgroup.name, volgroup.host.name )
                return 2
            volgroups = [volgroup]

        for volgroup in volgroups:
            print "Mounting volumes of volume group '%s'..." % volgroup.name
            if volgroup.host is None:
                volgroup.host = thishost
                volgroup.save()
            for lv in volgroup.logicalvolume_set.exclude(filesystem=""):
                lv.mount()

class VgStopCommand(BaseCommand):
    """Unmount all volumes. """

    command_name = "stop"

    def populate_optparser(self, parser):
        parser.add_option("-i", "--ignore-fail", help="Ignore failures", default=False, action="store_true")

    def __call__(self, options, vg=None):
        vols = LogicalVolume.objects.exclude(filesystem="")
        if vg is None:
            print "Unmounting all volumes..."
        else:
            print "Unmounting volumes of volume group '%s'..." % vg
            vols = vols.filter(vg__name=vg)
        for lv in vols:
            try:
                lv.unmount()
            except Exception:
                if not options.ignore_fail:
                    raise

class VgRestartCommand(BaseCommand):
    """Remount all volumes. """

    command_name = "restart"

    def __call__(self, options, vg=None):
        ret = CmdLibrary.handlers["stop"]()(options, vg)
        if ret != 0:
            return ret
        return CmdLibrary.handlers["start"]()(options, vg)

class VgStatusCommand(BaseCommand):
    """See if any volumes are currently mounted. """

    command_name = "status"

    def populate_optparser(self, parser):
        parser.add_option("-v", "--verbose", help="Show mounted volumes", default=False, action="store_true")

    def __call__(self, options, vg=None):
        try:
            vols = LogicalVolume.objects.exclude(filesystem="")
            if vg is not None:
                vols = vols.filter(vg__name=vg)
            volcount = vols.count()
            mountedcount = 0
            for lv in vols:
                if lv.mounted:
                    mountedcount += 1
                    if options.verbose:
                        print "Volume '%s' is mounted." % lv.name
                elif options.verbose:
                    print "Volume '%s' is not mounted." % lv.name
        except Exception, err:
            print "Got exception '%s' when checking, assuming the database isn't running and nothing is mounted." % unicode(err)
            return 3
        else:
            if mountedcount:
                print "There are currently %d mounted volumes (%d total)." % (mountedcount, volcount)
                return 0
            elif volcount:
                print "There are currently no mounted volumes (%d total)." % volcount
                return 3
            else:
                print "There are currently no volumes at all."
                return 0


def main():
    # Find the command argument
    command = None
    for arg in sys.argv[1:]:
        if arg[0] != "-":
            command = arg
            break

    usage = "%prog <command> [args]\n\nValid commands:\n"
    for cmdname, cmdclass in CmdLibrary.handlers.iteritems():
        usage += " * %-10s -- %s\n" % (cmdname, cmdclass.__doc__)

    parser = OptionParser(usage=usage)

    if command not in CmdLibrary.handlers:
        parser.print_usage()
        print "no such command:", command
        return 1
    cmdclass = CmdLibrary.handlers[command]()
    cmdclass.populate_optparser(parser)
    options, posargs = parser.parse_args()
    return cmdclass(options, *posargs[1:])

if __name__ == '__main__':
    sys.exit(main())

