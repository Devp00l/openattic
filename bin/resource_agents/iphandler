#!/usr/bin/env python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;
#
#  Copyright (C) 2011-2014, it-novum GmbH <community@open-attic.org>
#
#  openATTIC is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

import os
import sys

def meta_data():
    print """<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="oa_mount">
<version>1.0</version>

<longdesc lang="en">
Updates the database after a Service IP has been moved.
</longdesc>
<shortdesc lang="en">openATTIC IP Address Agent</shortdesc>

<parameters>
<parameter name="ipaddr" unique="0" required="1">
<longdesc lang="en">
The IP address.
</longdesc>
<shortdesc lang="en">IP Address</shortdesc>
<content type="string" default="" />
</parameter>
</parameters>

<actions>
<action name="start" timeout="30" />
<action name="stop" timeout="30" />
<action name="status" timeout="30" />
<action name="monitor" depth="0" timeout="30" interval="10" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
"""

# see /usr/lib/ocf/lib/heartbeat/ocf-returncodes
OCF_SUCCESS=0
OCF_ERR_GENERIC=1
OCF_ERR_ARGS=2
OCF_ERR_UNIMPLEMENTED=3
OCF_ERR_PERM=4
OCF_ERR_INSTALLED=5
OCF_ERR_CONFIGURED=6
OCF_NOT_RUNNING=7
OCF_RUNNING_MASTER=8
OCF_FAILED_MASTER=9

def main():
    action = sys.argv[-1]

    # Meta-Data can be dealt with without having to initialize Django.
    if action in ("metadata", "meta-data", "meta_data"):
        meta_data()
        return OCF_SUCCESS

    basedir = dict([
        line.strip().split("=") for line in open("/etc/default/openattic", "rb") if line.strip()
        ])["OADIR"].replace('"', '')

    sys.path.append( basedir )
    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

    import netifaces
    import socket
    from ifconfig.models import Host, IPAddress, NetDevice

    thishost = Host.objects.get_current()
    ipaddress = os.environ["OCF_RESKEY_ipaddr"]
    family = (":" in ipaddress) and socket.AF_INET6 or socket.AF_INET

    if action == "start":
        # find out which device the IP has been assigned to
        for dev in netifaces.interfaces():
            ifaddrs = netifaces.ifaddresses(dev)
            if family not in ifaddrs:
                continue
            if ipaddress in [data["addr"] for data in ifaddrs[family]]:
                break
        else:
            print "IP Address '%s' could not be found on any interfaces." % ipaddress
            return OCF_ERR_CONFIGURED

        netdev = NetDevice.objects.get(devname=dev)
        ipaddr = IPAddress.all_objects.get(address__startswith=("%s/" % ipaddress))
        ipaddr.device = netdev
        ipaddr.save()
        return OCF_SUCCESS

    elif action == "stop":
        # see if the IP address is actually running on our host
        try:
            ipaddr = IPAddress.objects.get(address__startswith=("%s/" % ipaddress))
        except IPAddress.DoesNotExist:
            print "IP Address '%s' does not appear to be running here." % ipaddress
            return OCF_NOT_RUNNING
        else:
            ipaddr.device = None
            ipaddr.save()
            return OCF_SUCCESS

    elif action in ("status", "monitor"):
        try:
            ipaddr = IPAddress.objects.get(address__startswith=("%s/" % ipaddress))
        except IPAddress.DoesNotExist:
            print "IP Address '%s' does not appear to be running here." % ipaddress
            return OCF_NOT_RUNNING
        else:
            print "IP Address '%s' is running here." % ipaddress
            return OCF_SUCCESS

    print "Unknown action '%s'." % action
    return OCF_ERR_GENERIC

if __name__ == '__main__':
    sys.exit(main())
